function EP = updateEP(EP,Offsprings,nEP)
% Update the external population

%------------------------------- Copyright --------------------------------
% Copyright (c) 2018-2019 BIMK Group. You are free to use the PlatEMO for
% research purposes. All publications which use this platform or any code
% in the platform should acknowledge the use of "PlatEMO" and reference "Ye
% Tian, Ran Cheng, Xingyi Zhang, and Yaochu Jin, PlatEMO: A MATLAB platform
% for evolutionary multi-objective optimization [educational forum], IEEE
% Computational Intelligence Magazine, 2017, 12(4): 73-87".
%--------------------------------------------------------------------------

%% Select the non-dominated solutions
EP = [EP,Offsprings];

for index = 1 : length(EP)
    F(index,:) = EP(index).Obj;
end
if size(F,2)==1
    [~,IndexMax] = min(F);
    EP = EP(IndexMax);
else
    
    [FrontNo,~] = NDSort(F,1);
    EP = EP(FrontNo == 1);
    clear F
    for index = 1 : length(EP)
        F(index,:) = EP(index).Obj;
    end
    [F,IA,~] = unique(F,'rows');
    EP = EP(IA);
    %% Protect Non specialized solutions
    EPNonSP = [];
    EP_rest = [];
    BestEP = [];
    [minF,I] = min(F,[],1);
    BestEP = EP(I);

%     if ~isempty(EPNonSP)
%         disp('NnonSp>0')
%     end
    %% Delete the overcrowded solutions
    
    if lngth(EP) > nEP
        F = [];
        for index = 1 : length(EP)
            F(index,:) = EP(index).Obj;
        end
        [N,M] = size(F);
        Dis = pdist2(F,F);
        Dis(logical(eye(length(Dis)))) = inf;
        Del = false(1,N);
        while sum(Del) < N-nEP
            Remain = find(~Del);
            subDis = sort(Dis(Remain,Remain),2);
            [~,worst] = min(prod(subDis(:,1:min(M,length(Remain))),2));
            Del(Remain(worst)) = true;
        end
        EP = EP(~Del);
        EP = [BestEP,EP];
    else
        EP =  [BestEP,EPNonSP(randperm(length(EPNonSP),nEP-length(BestEP)))];
    end
end
end